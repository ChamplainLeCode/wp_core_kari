{
    "title": "Hello World",
    "menu.constants": "Constants",
    "menu.controllers": "Controllers",
    "menu.modules": "Modules",
    "menu.errors": "Errors",
    "menu.resources": "Resources",
    "menu.routage": "Routage",
    "menu.services": "Services",
    "menu.screens": "Screens",
    "menu.widgets": "Widget",
    "menu.scanner": "Read QR",
    "menu.badge.new": "new",
    "welcome.message": "Welcome ${username} Dev",
    "welcome.message1": "Happy that you are a part of the Community",
    "welcome.message2": "Please take a look at new features on the menu bar",
    "eg": "Example:  \n",
    "karee.module.constant.title": "KAREE WITH CONSTANTS",
    "karee.module.constant.details": "Karee brings 3 new constants, each for specific usage",
    "karee.module.constant.errorScreenName.detail": "This constant helps you to customize your error screen in your application in production mode. Sometimes, when your application is running, an unhandled error may occur, to avoid the default Flutter error screen, here is the way to change it. Just name a screen with this constant.",
    "karee.module.constant.profile.prod.detail": "The application profile is used by Karee to know if the application is running in dev mode or in prod mode. The production mode allows you to provide a contact page to your users in case of problems. Default Karee error screen look like this:",
    "karee.module.constant.profile.dev.detail": "When the developer mode is enabled, developers can get all errors thrown in the application on an UI. Default Karee error screen look like this:",
    "karee.module.controller.title": "KAREE WITH CONTROLLERS",
    "karee.module.controller.details": "The long awaited dependency injection concept in the Karee universe is now available. Karee now offers us a two-level dependency injection. Service injection and configuration variable injection",
    "karee.module.controller.service.title": "Service Injection",
    "karee.module.controller.service.detail": "Service injection allows you to initialize your services without worrying about major dependency injection problems such as the injection cycle.",
    "karee.module.controller.variable.title": "Configuration Variable",
    "karee.module.controller.variable.detail": "Variable injection consists in initializing a property of a service or a controller from an entry in the configuration file.",
    "karee.module.resources.title": "KAREE WITH RESOURCES",
    "karee.module.resources.details": "Karee has new resources, namely a configuration file and translation files",
    "karee.module.resources.config.title": "Configuration file",
    "karee.module.resources.config.detail": "The configuration file allows you to store all your variables that are useful for the configuration of your application. Thus these variables can be loaded through dependency injection in your services or in your controllers.",
    "karee.module.resources.locale.title": "Translation files",
    "karee.module.resources.locale.detail": "In order to facilitate the internationalization of your application, Karee has provided you with the easiest configuration in 3 steps.",
    "karee.module.resources.locale.step1": "Define supported languages",
    "karee.module.resources.locale.step2": "Add translation files",
    "karee.module.resources.locale.step3": "Using translations",
    "karee.module.routage.title": "KAREE WITH NAVIGATION",
    "karee.module.routage.details": "The two new concepts that Karee has added to its navigation are Internal routing and parameterized URLs",
    "karee.module.routage.url.title": "The parameterized URLs",
    "karee.module.routage.url.detail": "It is now possible to manipulate parametric urls with Karee, to do so, you just have to put the variable between braces {}.",
    "karee.module.routage.internal.title": "Internal routing",
    "karee.module.routage.internal.detail": "This long-awaited routing mode was born out of a real need in application development. The idea is to be able to dynamically change the components of a zone according to the navigation concept without altering the root navigation. To do this, two simple steps are necessary.",
    "karee.module.routage.internal.step1": "Setup the router",
    "karee.module.routage.internal.step2": "Proceed to routing",
    "karee.module.screen.title": "KAREE DEAL WITH SCREEN",
    "karee.module.screen.details": "At the highest level in the display of a page, the main component must be a descendant of a Karee's screen. These are of two types, StatelessScreen and StatefulScreen",
    "karee.module.screen.stls.title": "StatelessScreen",
    "karee.module.screen.stls.detail": "The StatelessScreen class is a descendant class of StatelessWidget, and offers a global scope to the CONTEXT, the MEDIA_QUERY without using the context (mediaQuery) and the screen dimensions (screenSize) ",
    "karee.module.screen.stfs.title": "StatefulScreen",
    "karee.module.screen.stfs.detail": "This type of screen inherits from StatefulWidget and has the same properties as StatelessScreen.",
    "karee.module.service.title": "KAREE WITH SERVICES",
    "karee.module.service.details": "Services in Karee, a new concept that designates a class containing business logic, and having the property of being injectable and into which other services or properties can be injected without worrying about the dependency cycle. Services are used to provide data to controllers or other services.",
    "karee.module.module.title": "KAREE DEALS WITH MODULES",
    "karee.module.module.details": "A karee module is a karee project, which is grafted onto the main project, and contains its own functional unit. It shares the same navigation system (Router). \nYou can now organize your Karee project into modules, it becomes more extensible and integration is simple, you can in two lines of code share the modules between your different applications.",
    "karee.module.module.resource.of": "This function is used to get the package name by Module type. When loading an asset, we can optionally specify the package name where we want to retrieve the asset from. We cannot get asset of the current package with non null value of this property  even if it's the current package's name. Running the root Karee projet in application mode, means that the rootBundle refer to the current application, and the resources of module should be load with the package name value. To allow running a module without getting an error on load resources from assets, we should know the mode of execution.",
    "karee.module.module.widget.of": "This function is used to determine whether the widget will be displayed or not depending of running mode.",
    "karee.module.module.load": "Function used to subcribe our module in Karee. it not means that the will be immediatly loaded, it will be loaded at same time with the root application if the [KareeModule.startWithRoot] is set to true, ortherwise it'll be loaded when needed."
}